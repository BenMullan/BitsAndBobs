<!--
	File:	webcam-recorder--1920-1080.htm - Shows video preview for all attached cameras (except those blacklisted below)
	Author:	BM + CursorAI 2025
-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>Webcam Recorder</title>
		<script>
			
			const idealResolution = { width : 1920, height : 1080 };
			const unwantedCameras_SubstringBlacklist = ["OBS"];
			let activeRecordingStream = null;
			let mediaRecorder = null;
			let recordedChunks = [];

			function startCameras() {
				
				navigator.mediaDevices.enumerateDevices().then(
					devices => {
					
						console.info("Locating video camera...");
						const videoDevices = devices.filter(device => device.kind === 'videoinput');
						const selectedDevice = videoDevices.find(
							device => ! unwantedCameras_SubstringBlacklist.some(substring => (device.label || "").includes(substring))
						);
						if (!selectedDevice) {
							alert('No suitable camera found.');
							return;
						}
						console.debug(`Using videoDevice: ${selectedDevice.label}`);
						startPreviewAndRecording(selectedDevice);
						
					}
				).catch(
					error => {
						console.error('Error enumerating devices', error);
						alert('Unable to access media devices.');
					}
				);
				
			}

			function stopRecording() {
				try {
					if (mediaRecorder && mediaRecorder.state !== 'inactive') {
						mediaRecorder.stop();
					}
				} finally {
					if (activeRecordingStream) {
						activeRecordingStream.getTracks().forEach(track => track.stop());
						activeRecordingStream = null;
					}
					document.querySelector('#stopButton').style.display = 'none';
					document.querySelector('#startButton').style.display = 'inline-block';
				}
			}

			const startPreviewAndRecording = videoDevice => {

				/* Shows the browser prompt for Camera access... */
				navigator.mediaDevices.getUserMedia(
					{
						audio : false,
						video : {
							deviceId	: videoDevice?.deviceId,
							width		: { ideal : idealResolution.width },
							height		: { ideal : idealResolution.height },
							frameRate	: { ideal : 30 }
						}
					}
				).then(
					mediaStreamRef => {
						activeRecordingStream = mediaStreamRef;
						const videoRef = document.createElement("video");
						videoRef.srcObject = mediaStreamRef;
						videoRef.autoplay = true;
						videoRef.muted = true;
						videoRef.playsInline = true;
						videoRef.setAttribute('style', 'width: 70vw; max-width: 960px; height: auto; border: 1px solid #ccc; border-radius: 8px; background: #000; display: block; margin: 0 auto;');
						document.querySelector("#camerasContainer").appendChild(videoRef);

						recordedChunks = [];
						let chosenMimeType = '';
						const preferredTypes = [
							"video/webm;codecs=vp9,opus",
							"video/webm;codecs=vp8,opus",
							"video/webm"
						];
						for (let idx = 0; idx < preferredTypes.length; idx++) {
							if (window.MediaRecorder && MediaRecorder.isTypeSupported(preferredTypes[idx])) {
								chosenMimeType = preferredTypes[idx];
								break;
							}
						}
						try {
							mediaRecorder = new MediaRecorder(mediaStreamRef, chosenMimeType ? { mimeType: chosenMimeType } : undefined);
						} catch (err) {
							console.error("Failed to create MediaRecorder", err);
							alert("Recording not supported in this browser.");
							return;
						}

						mediaRecorder.ondataavailable = event => {
							if (event.data && event.data.size > 0) {
								recordedChunks.push(event.data);
							}
						};

						mediaRecorder.onstop = () => {
							const mimeType = mediaRecorder && mediaRecorder.mimeType ? mediaRecorder.mimeType : "video/webm";
							const blob = new Blob(recordedChunks, { type: mimeType });
							const url = URL.createObjectURL(blob);
							const a = document.createElement("a");
							const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
							a.href = url;
							a.download = `webcam-recording-${timestamp}.webm`;
							document.body.appendChild(a);
							a.click();
							document.body.removeChild(a);
							URL.revokeObjectURL(url);
						};

						mediaRecorder.start();
						document.querySelector('#stopButton').style.display = 'inline-block';
						document.querySelector('#startButton').style.display = 'none';

					}
				).catch(error => {
					console.error('getUserMedia error', error);
					alert('Unable to access the camera.');
				});

			};
			
		</script>
	</head>
	<body style="text-align: center; margin: 0; padding: 16px; overflow: auto; background: #ffffff;">
		
		<button
			id="startButton"
			style="margin: 12px auto; padding: 10px 16px; border: 1px solid #999; border-radius: 6px; background: #f4f4f4; cursor: pointer; font-family: sans-serif; font-size: 14px; display: inline-block;"
			onclick="startCameras(); document.querySelector('#startButton').style.display = 'none';"
		>
			Start Camera...
		</button>
		<button
			id="stopButton"
			style="margin: 12px auto; padding: 10px 16px; border: 1px solid #b23b3b; border-radius: 6px; background: #ef5350; color: #fff; cursor: pointer; font-family: sans-serif; font-size: 14px; display: none;"
			onclick="stopRecording();"
		>
			Stop & Download
		</button>
		<div id="camerasContainer" style="max-width: 960px; margin: 0 auto;"></div>
		
	</body>
</html>